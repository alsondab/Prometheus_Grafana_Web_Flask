==============================
RAPPORT DE PROJET : Monitoring d'une Application Web avec Prometheus & Grafana
==============================

[ESPACE POUR CAPTURE D'ÉCRAN DE LA PAGE D'ACCUEIL DU PROJET]

1. RÉSUMÉ EXÉCUTIF DU PROJET
----------------------------
Ce projet vise à mettre en place une solution professionnelle de supervision d'une application web à l'aide de Prometheus et Grafana. L'objectif est de permettre la collecte, la visualisation et l'alerte en temps réel sur les métriques applicatives et système, tout en facilitant l'exploitation et la maintenance grâce à des outils modernes et open source.

2. OBJECTIFS DU PROJET
----------------------
- Mettre en place un monitoring complet d'une application web (Flask)
- Collecter des métriques applicatives, système et conteneurs
- Visualiser les données en temps réel via des dashboards Grafana
- Détecter et alerter sur les anomalies de performance ou d'erreur
- Fournir une architecture reproductible et facilement déployable (Docker)

[ESPACE POUR CAPTURE D'ÉCRAN DU DASHBOARD GRAFANA]

3. CHOIX TECHNIQUES
-------------------
- **Langage principal** : Python (Flask)
- **Monitoring** : Prometheus (scraping, stockage, alerting)
- **Visualisation** : Grafana (dashboards dynamiques)
- **Exporters** : Node Exporter (métriques système), cAdvisor (métriques Docker)
- **Orchestration** : Docker Compose (virtualisation légère)
- **Alerting** : Alertmanager (notifications Slack, webhooks)
- **Gestion des secrets** : Fichier `.env` (clé PROMETHEUS_HEX)
- **Système d'exploitation cible** : Windows 10/11, compatible Linux

[ESPACE POUR CAPTURE D'ÉCRAN DE LA STACK DOCKER]

4. ARCHITECTURE DE LA SOLUTION
------------------------------
- **Schéma général** :

    [Application Flask] <--> [Prometheus] <--> [Grafana]
         |                    |                |
    [Node Exporter]      [Alertmanager]   [cAdvisor]

- **Docker Compose** orchestre tous les services sur un réseau dédié
- **Prometheus** scrape les métriques de l'app Flask, Node Exporter, cAdvisor
- **Grafana** se connecte à Prometheus pour afficher les dashboards
- **Alertmanager** gère les alertes et notifications

[ESPACE POUR DIAGRAMME D'ARCHITECTURE OU CAPTURE D'ÉCRAN DE PROMETHEUS]

5. ÉTAPES DE RÉALISATION
------------------------
- Initialisation du projet et création du dépôt
- Développement de l'application Flask instrumentée avec Prometheus
- Rédaction des Dockerfile et docker-compose.yml
- Configuration de Prometheus (prometheus.yml, règles d'alerting)
- Provisioning automatique de Grafana (datasource, dashboards)
- Mise en place de l'Alertmanager et des règles d'alerte
- Tests de charge et simulation d'erreurs (load-test.py, endpoints /error, /slow)
- Documentation et scripts de démarrage multiplateforme (start.sh, start.bat)

[ESPACE POUR CAPTURE D'ÉCRAN D'UNE ALERTE OU D'UN TEST DE CHARGE]

6. RÉSULTATS OBTENUS
--------------------
- Supervision en temps réel de l'application et de l'infrastructure
- Dashboards Grafana dynamiques et personnalisés
- Alertes automatiques sur erreurs, lenteurs, ressources
- Déploiement reproductible sur n'importe quelle machine avec Docker
- Génération de trafic et validation des alertes via scripts

7. DIFFICULTÉS RENCONTRÉES ET SOLUTIONS
---------------------------------------
- **Problème d'encodage du fichier .env sous Windows** :
  Solution : forcer l'encodage ASCII lors de la génération du fichier
- **Erreur de configuration Prometheus (scrape_timeout > scrape_interval)** :
  Solution : ajustement des intervalles dans prometheus.yml
- **Dépendances Python manquantes** :
  Solution : mise à jour du requirements.txt
- **Simulation de charge sous Windows sans openssl** :
  Solution : utilisation de PowerShell pour générer une clé sécurisée

8. CONCLUSION ET PERSPECTIVES
-----------------------------
Ce projet a permis de mettre en œuvre une stack de monitoring professionnelle, facilement déployable et extensible. Les outils open source utilisés (Prometheus, Grafana, Docker) offrent une grande flexibilité et une forte valeur ajoutée pour la supervision d'applications modernes.

**Perspectives :**
- Intégration d'un pipeline CI/CD pour le déploiement automatisé
- Ajout de notifications vers d'autres canaux (Teams, email)
- Extension à la supervision multi-applications ou microservices
- Déploiement sur le cloud (AWS, Azure, GCP) avec Kubernetes

[ESPACE POUR CAPTURE D'ÉCRAN FINALE DU DASHBOARD OU D'UNE ALERTE]

============================== 